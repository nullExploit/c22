<%- include('partials/header') %>
  <div class="card mb-5 mt-5">
    <div class="card-header p-4">
      <h1 class="text-center">MongoDB Breads(Browse, Read, Edit, Add, Delete, Sort)</h1>
    </div>
    <form autocomplete="off" id="queryForm">
      <div class="m-3 row">
        <div class="col-sm-2">
          <div class="input-group mb-3">
            <span class="input-group-text">Show</span>
            <select id="limitInput" class="form-control">
              <option value="0">All</option>
              <option value="5">5</option>
              <option value="10">10</option>
            </select>
            <span class="input-group-text">entries</span>
          </div>
        </div>
        <div class="col-sm-10">
          <div class="mb-3 d-flex">
            <input type="text" id="query" class="form-control" placeholder="search">
            <button type="submit" class="btn btn-outline-success"><i class="fa-solid fa-magnifying-glass"></i></button>
            <button id="resetSearch" class="btn btn-outline-warning"><i class="fa-solid fa-rotate"></i></button>
          </div>
        </div>
      </div>
    </form>

    <table class="table table-striped">
      <thead>
        <th>No.</th>
        <th id="thName"></th>
        <th id="thPhone"></th>
        <th>actions</th>
      </thead>
      <tbody>
      </tbody>

    </table>

    <div class="card-footer">
      <div class="m-3 row">
        <div class="col-sm-8">
          <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addItem"><i
              class="fa-solid fa-plus"></i></button>
        </div>
        <div class="col-sm-4 d-flex justify-content-sm-around align-items-center">
          <p id="entriesInfo"></p>
          <nav aria-label="Page navigation example">
            <ul class="pagination">
            </ul>
          </nav>
        </div>
      </div>

      <div class="modal fade" id="addItem" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog" style="background: none ;">
          <div class="modal-content">
            <div class="modal-header">
              <h1 class="modal-title fs-5" id="staticBackdropLabel">User Form</h1>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                onclick="formClean()"></button>
            </div>
            <div class="modal-body">
              <div class="mb-3 row">
                <div class="col-sm-2">
                  <label for="name" class="form-label mt-1">Name</label>
                </div>
                <div class="col-sm-10">
                  <input type="text" class="form-control" id="addItemName" name="name">
                </div>
              </div>
              <div class="mb-3 row">
                <div class="col-sm-2">
                  <label for="phone" class="form-label mt-1">Phone</label>
                </div>
                <div class="col-sm-10">
                  <input type="text" class="form-control" id="addItemPhone" name="phone"
                    onkeypress="return event.charCode >= 48 && event.charCode <= 57">
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
                onclick="formClean()">Close</button>
              <button type="submit" class="btn btn-primary" data-bs-dismiss="modal" onclick="addUser()">Save
                Changes</button>
            </div>
          </div>
        </div>
      </div>


    </div>

  </div>

  <script>
    const table = document.querySelector("tbody")
    const form = document.getElementById("queryForm")
    const pagination = document.querySelector(".pagination")
    const para = document.getElementById("entriesInfo")
    const thName = document.getElementById("thName")
    const thPhone = document.getElementById("thPhone")
    const limitInput = document.getElementById("limitInput")
    const searchInput = document.getElementById("query")
    const reset = document.getElementById("resetSearch")

    // window.location.href == "http://localhost:3000/" ? window.location.href += "?page=1&sortBy=_id&sortMode=asc" : window.location.href

    let mode = 1;
    let indexPage = 1;
    let by = "_id"
    let indexLimit = 0
    let search = ""
    let html = ''

    main()

    async function request() {
      try {
        const data = await fetch(`/api/users/?page=${indexPage}&sortBy=${by}&sortMode=${mode}&limit=${indexLimit}&query=${search}`)
        return data.json()
      } catch (error) {
        console.log("Failed to fetch", error)
      }
    }

    async function main() {
      try {
        const datas = await request()
        let index = 1;

        for (let data of datas.user) {
          const user = await getUser(data._id)

          html += `
          <tr>
            <td class="indexNumber">${datas.offset + index++}</td>
            <td>${data.name}</td>
            <td>${data.phone}</td>
            <td>
              <a class="btn btn-success" href="/edit/${data._id}" data-bs-toggle="modal" data-bs-target="#editItem${data._id}"><i class="fa-solid fa-pen"></i></a>
              <a class="btn btn-danger" href="/delete/${data._id}" data-bs-toggle="modal" data-bs-target="#deleteItem${data._id}"><i class="fa-solid fa-trash"></i></a>
              <a class="btn btn-warning" href="/users/${data._id}/todos"><i class="fa-solid fa-right-from-bracket"></i></a>
            </td>
          </tr>
          
  
          <div class="modal fade" id="editItem${data._id}" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog" style="background: none ;">
          <div class="modal-content">
            <div class="modal-header">
              <h1 class="modal-title fs-5" id="staticBackdropLabel">User Form</h1>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
          <div class="modal-body">
                <div class="mb-3 row">
                    <div class="col-sm-2">
                      <label for="name" class="form-label mt-1">Name</label>
                    </div>
                    <div class="col-sm-10">
                      <input type="text" class="form-control" id="name${data._id}" name="name" value="${user[0].name}">
                    </div>
                </div>
                <div class="mb-3 row">
                    <div class="col-sm-2">
                      <label for="phone" class="form-label mt-1">Phone</label>
                    </div>
                    <div class="col-sm-10">
                      <input type="text" class="form-control" id="phone${data._id}" name="phone" value="${user[0].phone}" onkeypress="return event.charCode >= 48 && event.charCode <= 57">
                    </div>
                </div>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="main()">Close</button>
                <button type="submit" class="btn btn-primary" data-bs-dismiss="modal" onclick="updateUser('${data._id}')">Save Changes</button>
              </div>
          </div>
        </div>
      </div>
  
      <div class="modal fade" id="deleteItem${data._id}" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog" style="background: none ;">
          <div class="modal-content">
            <div class="modal-header">
              <h1 class="modal-title fs-5" id="staticBackdropLabel">Delete Confirmation</h1>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>are you sure?</p>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                <button type="submit" class="btn btn-primary" data-bs-dismiss="modal" onclick="deleteUser('${data._id}')">Yes</button>
              </div>
          </div>
        </div>
      </div>
            `
        }

        table.innerHTML = html

        html = ''


        if (datas.page != 1) {
          html += `
          <li class="page-item">
            <button class="page-link" onclick="return (indexPage--, main())" aria-label="Previous">
              <span aria-hidden="true">&laquo;</span>
            </button>
          </li>
          `
        }

        for (let i = 1; i <= datas.pages; i++) {

          if (datas.page == i) {
            html += `
          <li class="page-item"><button class="page-link active" onclick="return (indexPage = ${Number(i)}, main())">${i}</button></li>
          `
          } else {
            html += `
            <li class="page-item"><button class="page-link" onclick="return (indexPage = ${Number(i)}, main())">${i}</button></li>
            `
          }

        }

        if (datas.page < datas.pages) {
          html += `
          <li class="page-item">
            <button class="page-link" onclick="return (indexPage++, main())" aria-label="Next">
              <span aria-hidden="true">&raquo;</span>
            </button>
          </li>
          `
        }

        pagination.innerHTML = html
        
        const firstIndex = document.querySelectorAll(".indexNumber")[0]
        const lastIndex = document.querySelectorAll(".indexNumber")[document.querySelectorAll(".indexNumber").length - 1]

        para.innerHTML = `Showing ${firstIndex?.innerText || 0} to ${lastIndex?.innerText || 0} of ${datas.total} entries`


        limitInput.onchange = (event) => {
          indexLimit = Number(event.target.value)
          indexPage = 1
          main()
        }

        thName.innerHTML = `<a id="linkName" style="cursor: pointer; user-select: none;">Name <i class="${by != "name" ? "fa-solid fa-sort" : mode == 1 ? "fa-solid fa-sort-up" : "fa-solid fa-sort-down"}"></i></a>`
        thPhone.innerHTML = `<a id="linkPhone" style="cursor: pointer; user-select: none;">Phone <i class="${by != "phone" ? "fa-solid fa-sort" : mode == 1 ? "fa-solid fa-sort-up" : "fa-solid fa-sort-down"}"></i></a>`

        document.getElementById("linkName").onclick = () => {
          mode = mode == 1 ? -1 : 1
          by = "name"
          main()
        }

        document.getElementById("linkPhone").onclick = () => {
          mode = mode == 1 ? -1 : 1
          by = "phone"
          main()
        }

        form.onsubmit = (event) => {
          event.preventDefault()
          search = searchInput.value
          main()
        } 

        reset.onclick = () => {
          limitInput.value = 0
          indexPage = 1
          by = "_id"
          mode = 1
          indexLimit = 0
          search = ""

          searchInput.value = ""
        }

        html = ''

      } catch (error) {
        console.log(error)
      }
    }

    async function getUser(id) {
      try {
        const data = await fetch(`/api/users/${id}`)
        const res = data.json()
        return res
      } catch (error) {
        console.log(error)
      }
    }

    async function updateUser(id) {
      try {
        const name = document.getElementById(`name${id}`).value
        const phone = document.getElementById(`phone${id}`).value

        const send = {}


        if (name) send.name = name
        if (phone) send.phone = phone

        const method = {
          method: "PUT",
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(send)
        }

        await fetch(`/api/users/${id}`, method)
        main()

      } catch (error) {
        console.log(error)
      }
    }

    function formClean() {
      const name = document.getElementById("addItemName")
      const phone = document.getElementById("addItemPhone")

      name.value = ''
      phone.value = ''
    }

    async function deleteUser(id) {
      try {
        const method = {
          method: "DELETE",
          headers: {
            'Content-Type': 'application/json'
          }
        }

        await fetch(`/api/users/${id}`, method)
        await fetch(`/api/todos/many/${id}`, method)

        main()
      } catch (error) {
        console.log(error)
      }
    }

    async function addUser() {
      try {
        const name = document.getElementById("addItemName").value
        const phone = document.getElementById("addItemPhone").value

        if (!name || !phone) return alert("credentials are required")

        const send = { name, phone }

        const method = {
          method: "POST",
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(send)
        }

        await fetch(`/api/users`, method)
        formClean()
        main()
      } catch (error) {
        console.log(error)
      }
    }


  </script>

  <%- include('partials/footer') %>